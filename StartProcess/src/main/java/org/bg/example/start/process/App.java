/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.bg.example.start.process;

import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App {
    public static void main(String[] args) {
        final Logger LOGGER = Logger.getLogger(ProducerAction.class);

        Collection<Runnable> actionsToPreform = new ArrayList<>();
        boolean shouldInitiateProducer = Utils.getEnvBool("SHOULD_INITIALIZE_PRODUCER");
        boolean shouldInitiateConsumer = Utils.getEnvBool("SHOULD_INITIALIZE_CONSUMER");

        if (shouldInitiateProducer) {
            if (shouldInitiateConsumer) {
                LOGGER.info("Running handler which consumes messages from specific topic and than produces them to " +
                        "another one");
                actionsToPreform.add(new ConsumerAndProducerAction());
            } else {
                LOGGER.info("Running handler which produces them to specific topic");
                actionsToPreform.add(new ProducerAction());
            }
            ExecutorService executorService = Executors.newFixedThreadPool(actionsToPreform.size());
            actionsToPreform.forEach(executorService::execute);
            executorService.shutdown();
        } else {
            LOGGER.warn("You don't want to produce any message, means you want to consume, " +
                    "but this case is not relevant right now..");
        }
    }
}
